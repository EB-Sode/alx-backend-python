name: Django CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_NAME: test_db
      DATABASE_USER: test_user
      DATABASE_PASSWORD: test_password
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 3306
      DJANGO_SETTINGS_MODULE: messaging_app.settings
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          pip install flake8 pytest pytest-cov

      - name: Run flake8 Linting
        run: |
          echo "Running flake8 code quality checks..."
          flake8 messaging_app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 messaging_app --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        continue-on-error: false

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to start..."
          sleep 20
          mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "SHOW DATABASES;"

      - name: Run migrations
        run: |
          python messaging_app/manage.py migrate --noinput

      - name: Run tests with coverage
        run: |
          mkdir -p reports
          pytest messaging_app \
            --maxfail=1 --disable-warnings -q \
            --cov=messaging_app --cov-report=xml:reports/coverage.xml \
            --cov-report=html:reports/htmlcov \
            --junitxml=reports/test-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: django-test-results
          path: reports/test-results.xml

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: django-coverage-report
          path: reports/htmlcov
